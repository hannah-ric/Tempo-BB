export interface FurnitureDesignBrief {
  description: string; // Natural language description, e.g., "walnut dining chair with dovetail drawers"
  style?: string;
  targetDimensions?: {
    length?: string;
    width?: string;
    height?: string;
    depth?: string; // For items like cabinets/bookshelves
    units?: "in" | "cm" | "mm";
  };
  material?: string;
  joineryMethods?: string[] | string;
}

export interface ComponentModel {
  id: string;
  name: string;
  quantity: number;
  dimensions: string; // e.g., "L: 24in, W: 1.5in, T: 0.75in"
  materialId?: string; // Reference to a MaterialModel
  description?: string;
  tolerance?: string; // e.g., "+/- 0.5mm"
}

export interface MaterialModel {
  id: string;
  name: string; // e.g., "Walnut Lumber", "Baltic Birch Plywood"
  type: "Lumber" | "SheetGood" | "Hardware" | "Other";
  grade?: string; // e.g., "FAS", "Select"
  finish?: string; // e.g., "Polyurethane", "Oil"
  vendor?: string;
  sku?: string;
  pricePerUnit?: number;
  unit?: string; // e.g., "board foot", "sheet", "piece"
  mechanicalProperties?: Record<string, string>; // e.g., { "density": "640 kg/mÂ³" }
}

export interface JoineryModel {
  id: string;
  type: string; // e.g., "Dovetail", "Mortise and Tenon", "Pocket Hole"
  strengthRating?: number; // 1-5 scale
  description?: string;
  compatibleMaterials?: string[];
  compatibleThickness?: string; // e.g., "0.75in - 1.5in"
  requiredTools?: string[];
}

export interface HardwareModel extends MaterialModel {
  // Hardware can share some properties with MaterialModel
  type: "Hardware"; // Override MaterialModel type
  size?: string; // e.g., "#8 x 1.25in"
  material?: string; // e.g., "Stainless Steel", "Brass"
}

export interface CutListItem {
  id: string;
  componentName: string; // Reference to a ComponentModel's name
  partName: string; // e.g., "Leg Front Left", "Apron Side"
  quantity: number;
  length: string;
  width: string;
  thickness: string;
  material: string;
  grainDirection?: "Parallel" | "Perpendicular" | "Any";
  notes?: string;
}

export interface BillOfMaterialsItem {
  id: string;
  itemId: string; // Could be MaterialModel.id or HardwareModel.id
  itemName: string;
  itemType: "Material" | "Hardware" | "Other";
  quantity: number;
  unitCost?: number;
  totalCost?: number;
  supplier?: string;
  notes?: string;
}

export interface AssemblyStep {
  stepNumber: number;
  title: string;
  description: string;
  componentsInvolved: string[]; // Array of ComponentModel names/ids
  joineryUsed?: string[]; // Array of JoineryModel types/ids
  hardwareUsed?: string[]; // Array of HardwareModel names/ids
  toolsRequired?: string[];
  imageUrl?: string; // Optional image/diagram for the step
  estimatedTime?: string; // e.g., "30 minutes"
}

export interface BuildPlan {
  id: string; // UUID, generated by Postgres
  userId: string; // User who created/owns the plan
  planName: string;
  designBrief: FurnitureDesignBrief;
  createdAt: string; // ISO 8601 Timestamp
  updatedAt: string; // ISO 8601 Timestamp
  components: ComponentModel[];
  materials: MaterialModel[]; // Includes lumber, sheet goods
  hardware: HardwareModel[];
  joinery: JoineryModel[];
  cutList: CutListItem[];
  billOfMaterials: BillOfMaterialsItem[];
  assemblyInstructions: AssemblyStep[];
  modelUrl?: string; // URL to the GLTF/GLB model
  explodedModelUrl?: string; // URL to the exploded view model
  status: "Draft" | "PendingReview" | "Approved" | "Archived";
  version: number;
  notes?: string;
  // Fields for CNC/CAM export
  dxfUrl?: string;
  camInstructions?: string; // or a more structured object
  // Fields for procurement and supplier integration
  estimatedCost?: number;
  supplierQuotes?: Array<{
    supplierId: string;
    quoteId: string;
    totalCost: number;
    leadTime: string;
  }>;
}
